{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eloui\\\\OneDrive\\\\Documents\\\\FOLDERS\\\\SEM\\\\SEM6 BOOKS\\\\SOFTWARE ENGINEERING\\\\FILES\\\\PROJECT(s)\\\\Project\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { AttachFile } from '@material-ui/icons';\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from './styles';\nimport { createPost, updatePost } from '../../actions/posts';\nimport { clickFileUploadButton } from './clickFileInput'; // receiving the ID's\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    currentId,\n    setCurrentId,\n    isToggled\n  } = _ref;\n  const [postData, setPostData] = useState({\n    creator: '',\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null); // if there's a current id, loop through the posts and find the post that has that same id as the currentId\n\n  const classes = useStyles();\n  const dispatch = useDispatch(); // when the post value changes from nothing to the actual post,\n\n  useEffect(() => {\n    if (post) {\n      setPostData(post);\n    } // populate it with the data of the post\n\n  }, [post]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (currentId) {\n      // if ID is not null dispatch update post\n      // because if you already have an ID that means we'll be updating a current post\n      dispatch(updatePost(currentId, postData));\n    } else {\n      // not currentID is pesent, meaning a post has to be created\n      dispatch(createPost(postData));\n    }\n\n    clear();\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      creator: '',\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: isToggled ? classes.paper : classes.darkPaper,\n    children: [/*#__PURE__*/_jsxDEV(\"script\", {\n      type: \"text/javascript\",\n      src: \"clickFileInput.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      id: \"formTitle\",\n      className: isToggled ? classes.formTitle : classes.darkFormTitle,\n      variant: \"h6\",\n      children: [currentId ? 'Edit' : 'Make', \" A Reflection\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        InputProps: {\n          className: isToggled ? classes.textFieldCreator : classes.darkTextFieldCreator\n        },\n        InputLabelProps: {\n          className: isToggled ? classes.textFieldCreatorLabel : classes.darkTextFieldCreatorLabel\n        },\n        color: \"secondary\",\n        name: \"creator\",\n        variant: \"outlined\",\n        label: \"Creator\",\n        fullWidth: true,\n        value: postData.creator,\n        onChange: e => setPostData({ ...postData,\n          creator: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        InputProps: {\n          className: isToggled ? classes.textFieldTitle : classes.darkTextFieldTitle\n        },\n        InputLabelProps: {\n          className: isToggled ? classes.textFieldTitleLabel : classes.darkTextFieldTitleLabel\n        },\n        color: \"secondary\",\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        InputProps: {\n          className: isToggled ? classes.textFieldMessage : classes.darkTextFieldMessage\n        },\n        InputLabelProps: {\n          className: isToggled ? classes.textFieldMessageLabel : classes.darkTextFieldMessageLabel\n        },\n        color: \"secondary\",\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        InputProps: {\n          className: isToggled ? classes.textFieldTags : classes.darkTextFieldTags\n        },\n        InputLabelProps: {\n          className: isToggled ? classes.textFieldTagsLabel : classes.darkTextFieldTagsLabel\n        },\n        color: \"secondary\",\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttonWrap,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            id: \"upload\",\n            onClick: () => {\n              clickFileUploadButton();\n            },\n            className: classes.button,\n            variant: \"raised\",\n            color: \"secondary\",\n            size: \"large\",\n            fullWidth: true,\n            children: [\"Upload File \", /*#__PURE__*/_jsxDEV(AttachFile, {\n              className: classes.attachFile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 186\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"fileInputButton\",\n            className: classes.fileInput,\n            children: /*#__PURE__*/_jsxDEV(FileBase, {\n              type: \"file\",\n              multiple: false,\n              onDone: _ref2 => {\n                let {\n                  base64\n                } = _ref2;\n                return setPostData({ ...postData,\n                  selectedFile: base64\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"container\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"vy5c5S65K5chOrvJXVbfFhhaJA8=\", false, function () {\n  return [useSelector, useStyles, useDispatch];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/eloui/OneDrive/Documents/FOLDERS/SEM/SEM6 BOOKS/SOFTWARE ENGINEERING/FILES/PROJECT(s)/Project/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","AttachFile","FileBase","useDispatch","useSelector","useStyles","createPost","updatePost","clickFileUploadButton","Form","currentId","setCurrentId","isToggled","postData","setPostData","creator","title","message","tags","selectedFile","post","state","posts","find","p","_id","classes","dispatch","handleSubmit","e","preventDefault","clear","paper","darkPaper","formTitle","darkFormTitle","root","form","className","textFieldCreator","darkTextFieldCreator","textFieldCreatorLabel","darkTextFieldCreatorLabel","target","value","textFieldTitle","darkTextFieldTitle","textFieldTitleLabel","darkTextFieldTitleLabel","textFieldMessage","darkTextFieldMessage","textFieldMessageLabel","darkTextFieldMessageLabel","textFieldTags","darkTextFieldTags","textFieldTagsLabel","darkTextFieldTagsLabel","split","fileContainer","buttonWrap","button","attachFile","fileInput","base64","buttonSubmit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,EAAwCC,KAAxC,QAAqD,mBAArD;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,SAAQC,qBAAR,QAAoC,kBAApC,C,CAGgB;;;;AAChB,MAAMC,IAAI,GAAG,QAA4C;AAAA;;AAAA,MAA1C;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,GAA0C;AACrD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC;AAACoB,IAAAA,OAAO,EAAE,EAAV;AAAcC,IAAAA,KAAK,EAAE,EAArB;AAAyBC,IAAAA,OAAO,EAAE,EAAlC;AAAsCC,IAAAA,IAAI,EAAE,EAA5C;AAAgDC,IAAAA,YAAY,EAAE;AAA9D,GAAD,CAAxC;AACA,QAAMC,IAAI,GAAGhB,WAAW,CAAEiB,KAAD,IAAYX,SAAS,GAAGW,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUf,SAAlC,CAAH,GAAkD,IAAxE,CAAxB,CAFqD,CAGrD;;AACA,QAAMgB,OAAO,GAAGrB,SAAS,EAAzB;AACA,QAAMsB,QAAQ,GAAGxB,WAAW,EAA5B,CALqD,CAOrD;;AACAP,EAAAA,SAAS,CAAE,MAAI;AAEX,QAAIwB,IAAJ,EAAW;AACPN,MAAAA,WAAW,CAACM,IAAD,CAAX;AACH,KAJU,CAIV;;AAEJ,GANQ,EAMN,CAACA,IAAD,CANM,CAAT;;AAQA,QAAMQ,YAAY,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AAGA,QAAIpB,SAAJ,EAAe;AAAE;AACD;AAEZiB,MAAAA,QAAQ,CAAEpB,UAAU,CAAEG,SAAF,EAAaG,QAAb,CAAZ,CAAR;AAEH,KALD,MAKK;AAAE;AAEHc,MAAAA,QAAQ,CAACrB,UAAU,CAACO,QAAD,CAAX,CAAR;AAEH;;AACDkB,IAAAA,KAAK;AACR,GAfD;;AAiBA,QAAMA,KAAK,GAAG,MAAM;AAEhBpB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAG,IAAAA,WAAW,CAAE;AAACC,MAAAA,OAAO,EAAE,EAAV;AAAcC,MAAAA,KAAK,EAAE,EAArB;AAAyBC,MAAAA,OAAO,EAAE,EAAlC;AAAsCC,MAAAA,IAAI,EAAE,EAA5C;AAAgDC,MAAAA,YAAY,EAAE;AAA9D,KAAF,CAAX;AAEH,GALD;;AAOA,sBAGI,QAAC,KAAD;AAAO,IAAA,SAAS,EAAEP,SAAS,GAAGc,OAAO,CAACM,KAAX,GAAmBN,OAAO,CAACO,SAAtD;AAAA,4BACI;AAAQ,MAAA,IAAI,EAAC,iBAAb;AAA+B,MAAA,GAAG,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,UAAD;AAAY,MAAA,EAAE,EAAC,WAAf;AAA2B,MAAA,SAAS,EAAGrB,SAAS,GAAGc,OAAO,CAACQ,SAAX,GAAuBR,OAAO,CAACS,aAA/E;AAA8F,MAAA,OAAO,EAAC,IAAtG;AAAA,iBAA6GzB,SAAS,GAAG,MAAH,GAAY,MAAlI;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAM,MAAA,YAAY,EAAC,KAAnB;AAAyB,MAAA,UAAU,MAAnC;AAAoC,MAAA,SAAS,EAAG,GAAEgB,OAAO,CAACU,IAAK,IAAGV,OAAO,CAACW,IAAK,EAA/E;AAAkF,MAAA,QAAQ,EAAET,YAA5F;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,UAAU,EAAE;AAACU,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAACa,gBAAX,GAA8Bb,OAAO,CAACc;AAA5D,SAAvB;AAA0G,QAAA,eAAe,EAAE;AAACF,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAACe,qBAAX,GAAmCf,OAAO,CAACgB;AAAjE,SAA3H;AAAwN,QAAA,KAAK,EAAC,WAA9N;AAA0O,QAAA,IAAI,EAAC,SAA/O;AAAyP,QAAA,OAAO,EAAC,UAAjQ;AAA4Q,QAAA,KAAK,EAAC,SAAlR;AAA4R,QAAA,SAAS,MAArS;AAAsS,QAAA,KAAK,EAAE7B,QAAQ,CAACE,OAAtT;AAA+T,QAAA,QAAQ,EAAGc,CAAD,IAAOf,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,UAAAA,OAAO,EAAEc,CAAC,CAACc,MAAF,CAASC;AAAjC,SAAD;AAA3V;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AAAW,QAAA,UAAU,EAAE;AAACN,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAACmB,cAAX,GAA4BnB,OAAO,CAACoB;AAA1D,SAAvB;AAAsG,QAAA,eAAe,EAAE;AAACR,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAACqB,mBAAX,GAAiCrB,OAAO,CAACsB;AAA/D,SAAvH;AAAgN,QAAA,KAAK,EAAC,WAAtN;AAAiO,QAAA,IAAI,EAAC,OAAtO;AAA8O,QAAA,OAAO,EAAC,UAAtP;AAAiQ,QAAA,KAAK,EAAC,OAAvQ;AAA+Q,QAAA,SAAS,MAAxR;AAAyR,QAAA,KAAK,EAAEnC,QAAQ,CAACG,KAAzS;AAAgT,QAAA,QAAQ,EAAGa,CAAD,IAAOf,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeG,UAAAA,KAAK,EAAEa,CAAC,CAACc,MAAF,CAASC;AAA/B,SAAD;AAA5U;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,SAAD;AAAW,QAAA,UAAU,EAAE;AAACN,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAACuB,gBAAX,GAA8BvB,OAAO,CAACwB;AAA5D,SAAvB;AAA0G,QAAA,eAAe,EAAE;AAACZ,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAACyB,qBAAX,GAAmCzB,OAAO,CAAC0B;AAAjE,SAA3H;AAAwN,QAAA,KAAK,EAAC,WAA9N;AAA0O,QAAA,IAAI,EAAC,SAA/O;AAAyP,QAAA,OAAO,EAAC,UAAjQ;AAA4Q,QAAA,KAAK,EAAC,SAAlR;AAA4R,QAAA,SAAS,MAArS;AAAsS,QAAA,KAAK,EAAEvC,QAAQ,CAACI,OAAtT;AAA+T,QAAA,QAAQ,EAAGY,CAAD,IAAOf,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeI,UAAAA,OAAO,EAAEY,CAAC,CAACc,MAAF,CAASC;AAAjC,SAAD;AAA3V;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,SAAD;AAAW,QAAA,UAAU,EAAE;AAACN,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAAC2B,aAAX,GAA2B3B,OAAO,CAAC4B;AAAzD,SAAvB;AAAoG,QAAA,eAAe,EAAE;AAAChB,UAAAA,SAAS,EAAG1B,SAAS,GAAGc,OAAO,CAAC6B,kBAAX,GAAgC7B,OAAO,CAAC8B;AAA9D,SAArH;AAA4M,QAAA,KAAK,EAAC,WAAlN;AAA8N,QAAA,IAAI,EAAC,MAAnO;AAA0O,QAAA,OAAO,EAAC,UAAlP;AAA6P,QAAA,KAAK,EAAC,MAAnQ;AAA0Q,QAAA,SAAS,MAAnR;AAAoR,QAAA,KAAK,EAAE3C,QAAQ,CAACK,IAApS;AAA0S,QAAA,QAAQ,EAAGW,CAAD,IAAOf,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeK,UAAAA,IAAI,EAAEW,CAAC,CAACc,MAAF,CAASC,KAAT,CAAea,KAAf,CAAqB,GAArB;AAArB,SAAD;AAAtU;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAM,QAAA,SAAS,EAAE/B,OAAO,CAACgC,aAAzB;AAAA,+BACI;AAAK,UAAA,SAAS,EAAEhC,OAAO,CAACiC,UAAxB;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,QAAX;AAAoB,YAAA,OAAO,EAAG,MAAI;AAAEnD,cAAAA,qBAAqB;AAAI,aAA7D;AAAgE,YAAA,SAAS,EAAEkB,OAAO,CAACkC,MAAnF;AAA2F,YAAA,OAAO,EAAC,QAAnG;AAA4G,YAAA,KAAK,EAAC,WAAlH;AAA8H,YAAA,IAAI,EAAC,OAAnI;AAA2I,YAAA,SAAS,MAApJ;AAAA,oDAAiK,QAAC,UAAD;AAAY,cAAA,SAAS,EAAElC,OAAO,CAACmC;AAA/B;AAAA;AAAA;AAAA;AAAA,oBAAjK;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,EAAE,EAAC,iBAAR;AAA0B,YAAA,SAAS,EAAEnC,OAAO,CAACoC,SAA7C;AAAA,mCACI,QAAC,QAAD;AAAU,cAAA,IAAI,EAAC,MAAf;AAAsB,cAAA,QAAQ,EAAE,KAAhC;AAAuC,cAAA,MAAM,EAAE;AAAA,oBAAC;AAACC,kBAAAA;AAAD,iBAAD;AAAA,uBAAcjD,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeM,kBAAAA,YAAY,EAAE4C;AAA7B,iBAAD,CAAzB;AAAA;AAA/C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ,eAaI,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAErC,OAAO,CAACsC,YAA3B;AAAyC,QAAA,OAAO,EAAC,WAAjD;AAA6D,QAAA,KAAK,EAAC,SAAnE;AAA6E,QAAA,IAAI,EAAC,OAAlF;AAA0F,QAAA,IAAI,EAAC,QAA/F;AAAwG,QAAA,SAAS,MAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,eAcI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,WAAlC;AAA8C,QAAA,IAAI,EAAC,OAAnD;AAA2D,QAAA,OAAO,EAAEjC,KAApE;AAA2E,QAAA,SAAS,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AAwBH,CAhED;;GAAMtB,I;UAEWL,W,EAEGC,S,EACCF,W;;;KALfM,I;AAkEN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport {AttachFile} from '@material-ui/icons';\r\nimport FileBase from 'react-file-base64';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport useStyles from './styles';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\nimport {clickFileUploadButton} from './clickFileInput'\r\n\r\n\r\n                // receiving the ID's\r\nconst Form = ( { currentId, setCurrentId, isToggled } )=>{\r\n    const [postData, setPostData] = useState({creator: '', title: '', message: '', tags: '', selectedFile: ''});\r\n    const post = useSelector((state) => (currentId ? state.posts.find((p) => p._id === currentId) : null));\r\n    // if there's a current id, loop through the posts and find the post that has that same id as the currentId\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    // when the post value changes from nothing to the actual post,\r\n    useEffect( ()=>{\r\n\r\n        if( post ) {\r\n            setPostData(post);\r\n        }// populate it with the data of the post\r\n\r\n    }, [post])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if( currentId ){ // if ID is not null dispatch update post\r\n                        // because if you already have an ID that means we'll be updating a current post\r\n\r\n            dispatch( updatePost( currentId, postData ) );\r\n\r\n        }else{ // not currentID is pesent, meaning a post has to be created\r\n\r\n            dispatch(createPost(postData));\r\n\r\n        }\r\n        clear();\r\n    }\r\n\r\n    const clear = () => {\r\n\r\n        setCurrentId(null)\r\n        setPostData( {creator: '', title: '', message: '', tags: '', selectedFile: ''} );\r\n\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <Paper className={isToggled ? classes.paper : classes.darkPaper}>\r\n            <script type=\"text/javascript\" src=\"clickFileInput.js\"  />\r\n            <Typography id=\"formTitle\" className={ isToggled ? classes.formTitle : classes.darkFormTitle} variant=\"h6\">{ currentId ? 'Edit' : 'Make' } A Reflection</Typography>\r\n            <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <TextField InputProps={{className : isToggled ? classes.textFieldCreator : classes.darkTextFieldCreator}} InputLabelProps={{className : isToggled ? classes.textFieldCreatorLabel : classes.darkTextFieldCreatorLabel}} color=\"secondary\" name=\"creator\" variant=\"outlined\" label=\"Creator\" fullWidth value={postData.creator} onChange={(e) => setPostData({ ...postData, creator: e.target.value })}/>\r\n                <TextField InputProps={{className : isToggled ? classes.textFieldTitle : classes.darkTextFieldTitle}} InputLabelProps={{className : isToggled ? classes.textFieldTitleLabel : classes.darkTextFieldTitleLabel}} color=\"secondary\"name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })}/>\r\n                <TextField InputProps={{className : isToggled ? classes.textFieldMessage : classes.darkTextFieldMessage}} InputLabelProps={{className : isToggled ? classes.textFieldMessageLabel : classes.darkTextFieldMessageLabel}} color=\"secondary\" name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })}/>\r\n                <TextField InputProps={{className : isToggled ? classes.textFieldTags : classes.darkTextFieldTags}} InputLabelProps={{className : isToggled ? classes.textFieldTagsLabel : classes.darkTextFieldTagsLabel}} color=\"secondary\" name=\"tags\" variant=\"outlined\" label=\"Tags\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}/>\r\n                <div  className={classes.fileContainer}>\r\n                    <div className={classes.buttonWrap}>\r\n                        <Button id=\"upload\" onClick={ ()=>{ clickFileUploadButton() } } className={classes.button} variant=\"raised\" color=\"secondary\" size=\"large\" fullWidth>Upload File <AttachFile className={classes.attachFile}></AttachFile></Button>\r\n                        <div id=\"fileInputButton\" className={classes.fileInput}>\r\n                            <FileBase type=\"file\" multiple={false} onDone={({base64}) => setPostData({ ...postData, selectedFile: base64 })}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Button className={classes.buttonSubmit} variant=\"container\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Form"]},"metadata":{},"sourceType":"module"}